import Head from "next/head";
import { useRouter } from "next/router";
import { FormEvent, useCallback, useEffect, useState } from "react";
import Link from "next/link";

import Loader from "@/components/Loader";
import axios from "axios";
import Header from "@/components/Header";

type Documents = {
  id: number
  content: string
  pageContent: string
  metadata?: {
    document_id: number,
    loc?: {
      pageNumber: number
    }
  }
  embedding: [number]
  html_string: string
}

export default function Home() {
  const router = useRouter();

  const [input, setInput] = useState("");
  const [output, setOutput] = useState("");
  const [sourceDocuments, setSourceDocuments] = useState<Array<Documents>>([]);
  const [inflight, setInflight] = useState(false);

  const onSubmit = useCallback(
    async (e: FormEvent) => {
      e.preventDefault();

      // Prevent multiple requests at once
      if (inflight) return;

      // Reset output
      setInflight(true);
      setOutput("");

      try {
        const { data } = await axios.post('/api/chat', { input });
        setOutput(data.text);
        setSourceDocuments(data.sourceDocuments)
        setInput("");

      } catch (error) {
        console.error(error);
      } finally {
        setInflight(false);
      }
    },
    [input, inflight]
  );

  return (
    <>
      <Head>
        <title>LangChat X Supabase</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen m-8">
        <Header />

        <div className="m-4">
          <form
            onSubmit={onSubmit}
            className="flex "
          >
            <div className="flex w-full mb-4">
              <input
                type="text"
                placeholder="Ask..."
                className='p-2 grow'
                value={input}
                onChange={(e) => setInput(e.target.value)}
              />
              <button
                className={`${inflight && "cursor-not-allowed"} flex-none inline-block bg-slate-600 px-6 pb-2 pt-2 text-xs font-medium uppercase leading-normal`}
                type="submit"
              >
                {inflight ? <div className="flex items-center"><Loader className="mr-2" /> Processing...</div> : "Submit"}
              </button>
            </div>
          </form>
          <div>
            <div>
              <span className="mb-4">Response: {output}</span>
            </div>

            <h2 className="font-bold text-medium mt-6">Source Documents:</h2>
            {
              sourceDocuments.map((sourceDoc, i) => {
                if (sourceDoc?.metadata?.document_id) return (
                  <div key={sourceDoc?.metadata?.document_id}>
                    <div className="inline-block rounded px-4 py-1 my-1 bg-slate-600 hover:bg-slate-400 text-xs font-medium">
                      <Link href={{ pathname: `/documents/`, query: { id: sourceDoc?.metadata?.document_id, pageNumber: sourceDoc?.metadata?.loc?.pageNumber } }}>{
                        sourceDoc?.pageContent.length > 20 ?
                          `${sourceDoc?.pageContent.substring(0, 20)}...`
                          : sourceDoc?.pageContent
                      }</Link>
                    </div>
                  </div>
                )
              })
            }
            <span></span>
          </div>

        </div>
      </main >
    </>
  );
}

import Head from "next/head";
// import { Inter } from "next/font/google";
import { useRouter } from "next/router";
import { fetchEventSource } from "@microsoft/fetch-event-source";
import styles from "@/styles/Home.module.css";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { FormEvent, useCallback, useState } from "react";
import Link from "next/link";
//Langchain libs
// import { Chroma } from "langchain/vectorstores/chroma";
import { PineconeStore } from "langchain/vectorstores/pinecone";
import { OpenAIEmbeddings } from "langchain/embeddings/openai";
import { PineconeClient } from "@pinecone-database/pinecone";
import { OpenAI } from "langchain/llms/openai";
import { ConversationalRetrievalQAChain } from "langchain/chains";
import Loader from "@/components/Loader";

// const inter = Inter({ subsets: ["latin"] });

type Documents = {
  id: number
  content: string
  pageContent: string
  metadata?: { id: number }
  embedding: [number]
  html_string: string
}

export default function Home() {
  const router = useRouter();

  const supabase = useSupabaseClient();
  const [stream, setStream] = useState(false);
  const [input, setInput] = useState("");
  const [output, setOutput] = useState("");
  const [sourceDocuments, setSourceDocuments] = useState<Array<Documents>>([]);
  const [inflight, setInflight] = useState(false);

  const onSubmit = useCallback(
    async (e: FormEvent) => {
      e.preventDefault();

      // Prevent multiple requests at once
      if (inflight) return;

      // Reset output
      setInflight(true);
      setOutput("");

      try {
        if (stream) {
          // If streaming, we need to use fetchEventSource directly
          await fetchEventSource(
            // `${process.env.NEXT_PUBLIC_SUPABASE_URL}/functions/v1/chat`,
            `https://qascxchlzszulefgouop.functions.supabase.co/chat`,
            {
              method: "POST",
              body: JSON.stringify({ input }),
              headers: { "Content-Type": "application/json" },
              onmessage(ev) {
                setOutput((o) => o + ev.data);
              },
            }
          );
          setInput("");
        } else {
          // const client = new PineconeClient();
          // await client.init({
          //   apiKey: process.env.NEXT_PUBLIC_PINECONE_API_KEY,
          //   environment: process.env.NEXT_PUBLIC_PINECONE_ENVIRONMENT,
          // });
          // const pineconeIndex = client.Index(process.env.NEXT_PUBLIC_PINECONE_INDEX_NAME);

          // const vectorStore = await PineconeStore.fromExistingIndex(
          //   new OpenAIEmbeddings({
          //     openAIApiKey: process.env.NEXT_PUBLIC_API_KEY
          //   }),
          //   { pineconeIndex }
          // );

          // /* Initialize the LLM to use to answer the question */
          // const model = new OpenAI({ openAIApiKey: process.env.NEXT_PUBLIC_API_KEY });

          // /* Create the chain */
          // const chain = ConversationalRetrievalQAChain.fromLLM(
          //   model, vectorStore.asRetriever(), { returnSourceDocuments: true }
          // );
          // /* Ask it a question */
          // const question = input;
          // const res = await chain.call({ question, chat_history: [] });

          // console.log(res);

          // setOutput(res.text)

          // If not streaming, we can use the supabase client
          const { data } = await supabase.functions.invoke("vector", {
            body: { query: input },
          });
          setOutput(data.text);
          setSourceDocuments(data.sourceDocuments)
          setInput("");
        }
      } catch (error) {
        console.error(error);
      } finally {
        setInflight(false);
      }
    },
    [input, stream, inflight, supabase]
  );

  const testPdf = async () => {
    const { data } = await supabase.functions.invoke("pdfloader", {
      body: { query: input },
    });
  }

  return (
    <>
      <Head>
        <title>LangChat X Supabase</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen flex flex-col">
        <div className="flex justify-end p-4">
          <button
            className="inline-block rounded bg-slate-600 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
            onClick={() => router.push('/documents')}>
            Documents List
          </button>
        </div>

        <div className="flex flex-col items-center justify-center">
          <div style={{ width: 300 }}>

            <span>Response: {output}</span>
            <br />
            <h2 className="font-bold text-medium mt-6">Source Documents:</h2>
            {
              sourceDocuments.map((sourceDoc) => {
                if (sourceDoc?.metadata?.id) return (
                  <div key={sourceDoc?.metadata?.id}>
                    <div className="inline-block rounded px-4 py-1 my-1 bg-slate-600 hover:bg-slate-400 text-xs font-medium">
                      <Link href={{ pathname: `/documents/`, query: { id: sourceDoc?.metadata?.id } }}>{
                        sourceDoc?.pageContent.length > 20 ?
                          `${sourceDoc?.pageContent.substring(0, 20)}...`
                          : sourceDoc?.pageContent
                      }</Link>
                    </div>
                  </div>

                )
              })
            }
            <span></span>
          </div>
          <form
            onSubmit={onSubmit}
            style={{ display: "flex", flexDirection: "column" }}
          >
            <div className="flex items-center my-8">
              <input
                type="text"
                placeholder="Ask..."
                style={{ padding: 5, width: 200 }}
                value={input}
                onChange={(e) => setInput(e.target.value)}
              />
              <button
                className={`${inflight && "cursor-not-allowed"} inline-block bg-slate-600 px-6 pb-2 pt-2 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]`}
                type="submit"
              >
                {inflight ? <div className="flex items-center"><Loader className="mr-2" /> Processing...</div> : "Submit"}
              </button>
            </div>
          </form>
        </div>
      </main >
    </>
  );
}
